A general authentication application, which you can use for your future projects as basic sign in sign up template
it included jwt, google OAuth as well.

First dealing with front-end\
vite used for creating this project, tailwind css installed using 
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

https://tailwindcss.com/docs/guides/vite

initialize git using git init, then git add ., then git commit -m 'your msg' then go to your git hub account
create the repo there 

We will make pages and then define the routes for them as well.
Define those routes in app.jsx

now some backend setup, npm run dev will keep track of changes npm start will just start

Now time for setting the database, mongodb we will use for this project

mongodb+srv://ahsan:ahsan123@mernauth.hfsfzih.mongodb.net/mern-auth?retryWrites=true&w=majority&appName=mernAuth

/mern-auth added by myself as this will suggest db name

mongodb is not connecting due to network error let's sort it tomorrow, ok using lower node version

Now I will make create the model for mongodb

create the models folder, and add user in it

create a separate folder for routes as well, and then for controllers main logic will be in controllers

implement function in controller and then call that in routes

add middleware for handling errors

for custom error handling like show users if they haven't fill form create new folder utils and add in there

Now further add the sign up page structure, so now some work with client side

now add logic to sign up page form, you have to add proxy to vite.config.js file as well to get that form working

server : {
    proxy : {
      '/api' : {
        target : 'http://localhost:3000',
        changeOrigin : true,
      }
    }
  }

This part is added then that request works

axios and fetch choice, both have their own pros cons, axios is simple to use but problematic in production
fetch show some complexity, like in our case for error handling we have to extract the status from data, bcz data is
still sent in case of error so we have put success === false check in try block

Now create the sign in route (implement backend logic) JWT token logic will also be added
for token we use some unique identity, in our case id is the best choice, it is always guranteed to be unique, generated
by mongodb, what if we use name, i may generate the token if i know your username and able to do malicious attack so
thats the reason

then create the sign in page, done

now we are getting the data, we want to use it at different places, how to do that, make it available globally
like when we sign in we get the data, now for avatar section or some other section we want to use that, so you can
use redux or usecontext for this

So now working on redux
https://redux-toolkit.js.org/tutorials/quick-start

create a separate folder for redux
create a store and add this store to your main.jsx file
create a new folder inside redux for user slice
add reducers there and import them, then add this to store js reducers

Add redux dev tool extension for testing redux, in browser
add redux persist now -> pending

what redux persist does that it keeps the user data even when the page is refreshed

Now add google authentication OAuth, make a separate component for OAuth and then add
We use firebase for Oauth with google

Go to Firebase, then go to console. and add new project , npm install firebase and add file as well.
In your firebase project go to authentication and then enable google there, there are other authentication providers as well
Add this logic to authentication to that handleGoogleClick function, you have to store this data in your mongodb as well
initialize the post request here and send the data

//https://console.firebase.google.com/u/0/project/mern-auth-f72ff/authentication/users  this is the link to your firebase project

Now make the header component and make private route for the profile section, so that profile can only be accessed when sign in

Set Up the profile page

Alt+shift+downarrow (selected text will be pasted down)

Now work on upload image functionality, we will use useRef in this case (in form we specify input tag with type file and the choose file option will be shown, but I want to embed that in picture so we use useRef)

Changed Word Wrap settings in vs code

create your storage on firebase, for these pictures uploading

completed the profile page ui, upload image and some error handling, and storing that data in firebase, the pic will get updated when you upload but when you refresh the previous pic will be shown, now you will update the backend actually to store the changes.