A general authentication application, which you can use for your future projects as basic sign in sign up template
it included jwt, google OAuth as well.

First dealing with front-end\
vite used for creating this project, tailwind css installed using 
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

https://tailwindcss.com/docs/guides/vite

initialize git using git init, then git add ., then git commit -m 'your msg' then go to your git hub account
create the repo there 

We will make pages and then define the routes for them as well.
Define those routes in app.jsx

now some backend setup, npm run dev will keep track of changes npm start will just start

Now time for setting the database, mongodb we will use for this project

mongodb+srv://ahsan:ahsan123@mernauth.hfsfzih.mongodb.net/mern-auth?retryWrites=true&w=majority&appName=mernAuth

/mern-auth added by myself as this will suggest db name

mongodb is not connecting due to network error let's sort it tomorrow, ok using lower node version

Now I will make create the model for mongodb

create the models folder, and add user in it

create a separate folder for routes as well, and then for controllers main logic will be in controllers

implement function in controller and then call that in routes

add middleware for handling errors

for custom error handling like show users if they haven't fill form create new folder utils and add in there

Now further add the sign up page structure, so now some work with client side

now add logic to sign up page form, you have to add proxy to vite.config.js file as well to get that form working

server : {
    proxy : {
      '/api' : {
        target : 'http://localhost:3000',
        changeOrigin : true,
      }
    }
  }

This part is added then that request works

axios and fetch choice, both have their own pros cons, axios is simple to use but problematic in production
fetch show some complexity, like in our case for error handling we have to extract the status from data, bcz data is
still sent in case of error so we have put success === false check in try block

Now create the sign in route (implement backend logic) JWT token logic will also be added
for token we use some unique identity, in our case id is the best choice, it is always guranteed to be unique, generated
by mongodb, what if we use name, i may generate the token if i know your username and able to do malicious attack so
thats the reason
then create the sign in page